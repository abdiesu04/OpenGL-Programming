#include <GL/glut.h>

// Window dimensions
const int WINDOW_WIDTH = 800;
const int WINDOW_HEIGHT = 600;

// Function to draw the stadium pitch
void drawPitch() {
    // Draw the grass field
    glColor3f(0.0f, 0.6f, 0.0f);
    glBegin(GL_QUADS);
    glVertex2f(-1.0f, -0.8f);
    glVertex2f(-1.0f, 0.8f);
    glVertex2f(1.0f, 0.8f);
    glVertex2f(1.0f, -0.8f);
    glEnd();

    // Draw the white lines
    glColor3f(1.0f, 1.0f, 1.0f);
    glLineWidth(2.0f);

    // Draw the center line
    glBegin(GL_LINES);
    glVertex2f(0.0f, -0.8f);
    glVertex2f(0.0f, 0.8f);
    glEnd();

    // Draw the goal lines
    glBegin(GL_LINES);
    glVertex2f(-1.0f, -0.8f);
    glVertex2f(-1.0f, 0.8f);
    glVertex2f(1.0f, -0.8f);
    glVertex2f(1.0f, 0.8f);
    glEnd();

    // Draw the penalty areas
    glBegin(GL_LINES);
    glVertex2f(-0.6f, -0.8f);
    glVertex2f(-0.6f, 0.8f);
    glVertex2f(0.6f, -0.8f);
    glVertex2f(0.6f, 0.8f);
    glEnd();

    // Draw the goal areas
    glBegin(GL_LINES);
    glVertex2f(-0.4f, -0.8f);
    glVertex2f(-0.4f, 0.8f);
    glVertex2f(0.4f, -0.8f);
    glVertex2f(0.4f, 0.8f);
    glEnd();

    // Draw the center circle
    glBegin(GL_LINE_LOOP);
    for (int i = 0; i <= 360; i += 10) {
        float radians = i * 3.14159f / 180.0f;
        glVertex2f(cos(radians) * 0.1f, sin(radians) * 0.1f);
    }
    glEnd();
}

// Function to draw the scene
void drawScene() {
    // Clear the color and depth buffers
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    // Set up the projection matrix
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0f, (GLfloat)WINDOW_WIDTH / (GLfloat)WINDOW_HEIGHT, 0.1f, 100.0f);

    // Set up the modelview matrix
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
    gluLookAt(0.0f, 0.0f, 5.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f);

    // Draw the stadium pitch
    drawPitch();

    // Swap the buffers to display the rendered scene
    glutSwapBuffers();
}

// Function to handle window resizing
void reshape(int width, int height) {
    // Set the viewport to the new window size
    glViewport(0, 0, width, height);

    // Recalculate the projection matrix
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0f, (GLfloat)width / (GLfloat)height, 0.1f, 100.0f);

    // Restore the modelview matrix
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

// Main function
int main(int argc, char** argv) {
    // Initialize GLUT
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(WINDOW_WIDTH, WINDOW_HEIGHT);
    glutCreateWindow("Stadium Pitch");

    // Set the display and reshape callbacks
    glutDisplayFunc(drawScene);
    glutReshapeFunc(reshape);

    // Enter the GLUT event loop
    glutMainLoop();

    return 0;
}